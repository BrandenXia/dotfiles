#!/usr/bin/env python3

import os
import sys

from collections.abc import Callable, Iterable
from functools import reduce
from pathlib import Path

FILE_DIR = Path(__file__).parent.absolute()

HOME_DIR = Path.home()
CONFIG_DIR = HOME_DIR / ".config"


def link_to_config(target_name: str, dotfile_dir: Path):
    os.symlink(dotfile_dir, CONFIG_DIR / target_name)


def link_file(
    file_name: str,
    dotfile_dir: Path,
    target_dir: Path,
):
    os.symlink(dotfile_dir / file_name, target_dir / file_name)


def add_to_file(file_path: Path, content: str | list[str]):
    with open(file_path, "a") as f:
        f.write("\n")
        content = content if isinstance(content, str) else "\n".join(content)
        f.write(content)
        f.write("\n")


def add_to_zshrc(content: str | list[str]):
    add_to_file(HOME_DIR / ".zshrc", content)


type TargetName = str
type DotfileDir = Path
type InstallFunc = Callable[[TargetName, DotfileDir], None]
type Configs = dict[TargetName | Iterable[TargetName], InstallFunc]


def validate_configs(cfgs: Configs) -> bool:
    keys = reduce(
        lambda pre, item: [*pre, item] if isinstance(item, str) else [*pre, *item],
        cfgs.keys(),
        [],
    )
    return len(set(keys)) == len(keys)


# edit to add more configs
configs: Configs = {
    (
        "git",
        "kitty",
        "yazi",
        "nvim",
        "zathura",
        "karabiner",
        "sioyek",
        "lazygit",
    ): link_to_config,
    "zsh": lambda _, dotfile_dir: add_to_zshrc(
        [
            "# common config from dotfiles",
            f"for file in {dotfile_dir.absolute()}/*.zsh; do",
            "    source $file",
            "done",
        ],
    ),
    "scripts": lambda _, dotfile_dir: add_to_zshrc(
        ["# scripts from dotfiles", f"export PATH=$PATH:{dotfile_dir.absolute()}"]
    ),
}


def main():
    assert validate_configs(configs), "Invalid configs provided"

    try:
        target = sys.argv[1]
    except IndexError:
        print("Not enough argument provided")
        sys.exit(1)

    try:
        install_func = [
            install_func
            for target_name, install_func in configs.items()
            if target
            in (target_name if isinstance(target_name, Iterable) else (target_name))
        ][0]
    except KeyError:
        print("Target not found")
        sys.exit(1)

    install_func(target, FILE_DIR / target)


if __name__ == "__main__":
    main()
